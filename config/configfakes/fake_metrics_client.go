// Code generated by counterfeiter. DO NOT EDIT.
package configfakes

import (
	"context"
	"sync"
	"time"

	"github.com/3xcellent/github-metrics/config"
	"github.com/google/go-github/v32/github"
)

type FakeMetricsClient struct {
	GetIssueStub        func(context.Context, string, string, int) (*github.Issue, error)
	getIssueMutex       sync.RWMutex
	getIssueArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
	}
	getIssueReturns struct {
		result1 *github.Issue
		result2 error
	}
	getIssueReturnsOnCall map[int]struct {
		result1 *github.Issue
		result2 error
	}
	GetIssueEventsStub        func(context.Context, string, string, int) ([]*github.IssueEvent, error)
	getIssueEventsMutex       sync.RWMutex
	getIssueEventsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
	}
	getIssueEventsReturns struct {
		result1 []*github.IssueEvent
		result2 error
	}
	getIssueEventsReturnsOnCall map[int]struct {
		result1 []*github.IssueEvent
		result2 error
	}
	GetIssuesFromColumnStub        func(context.Context, string, int64, time.Time, time.Time) map[string][]*github.Issue
	getIssuesFromColumnMutex       sync.RWMutex
	getIssuesFromColumnArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 time.Time
		arg5 time.Time
	}
	getIssuesFromColumnReturns struct {
		result1 map[string][]*github.Issue
	}
	getIssuesFromColumnReturnsOnCall map[int]struct {
		result1 map[string][]*github.Issue
	}
	GetProjectStub        func(context.Context, int64) (*github.Project, error)
	getProjectMutex       sync.RWMutex
	getProjectArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	getProjectReturns struct {
		result1 *github.Project
		result2 error
	}
	getProjectReturnsOnCall map[int]struct {
		result1 *github.Project
		result2 error
	}
	GetProjectColumnsStub        func(context.Context, int64) []*github.ProjectColumn
	getProjectColumnsMutex       sync.RWMutex
	getProjectColumnsArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	getProjectColumnsReturns struct {
		result1 []*github.ProjectColumn
	}
	getProjectColumnsReturnsOnCall map[int]struct {
		result1 []*github.ProjectColumn
	}
	GetPullRequestsStub        func(context.Context, string, string) ([]*github.PullRequest, error)
	getPullRequestsMutex       sync.RWMutex
	getPullRequestsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	getPullRequestsReturns struct {
		result1 []*github.PullRequest
		result2 error
	}
	getPullRequestsReturnsOnCall map[int]struct {
		result1 []*github.PullRequest
		result2 error
	}
	GetReposFromIssuesOnColumnStub        func(context.Context, int64) []string
	getReposFromIssuesOnColumnMutex       sync.RWMutex
	getReposFromIssuesOnColumnArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	getReposFromIssuesOnColumnReturns struct {
		result1 []string
	}
	getReposFromIssuesOnColumnReturnsOnCall map[int]struct {
		result1 []string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMetricsClient) GetIssue(arg1 context.Context, arg2 string, arg3 string, arg4 int) (*github.Issue, error) {
	fake.getIssueMutex.Lock()
	ret, specificReturn := fake.getIssueReturnsOnCall[len(fake.getIssueArgsForCall)]
	fake.getIssueArgsForCall = append(fake.getIssueArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("GetIssue", []interface{}{arg1, arg2, arg3, arg4})
	fake.getIssueMutex.Unlock()
	if fake.GetIssueStub != nil {
		return fake.GetIssueStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getIssueReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMetricsClient) GetIssueCallCount() int {
	fake.getIssueMutex.RLock()
	defer fake.getIssueMutex.RUnlock()
	return len(fake.getIssueArgsForCall)
}

func (fake *FakeMetricsClient) GetIssueCalls(stub func(context.Context, string, string, int) (*github.Issue, error)) {
	fake.getIssueMutex.Lock()
	defer fake.getIssueMutex.Unlock()
	fake.GetIssueStub = stub
}

func (fake *FakeMetricsClient) GetIssueArgsForCall(i int) (context.Context, string, string, int) {
	fake.getIssueMutex.RLock()
	defer fake.getIssueMutex.RUnlock()
	argsForCall := fake.getIssueArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeMetricsClient) GetIssueReturns(result1 *github.Issue, result2 error) {
	fake.getIssueMutex.Lock()
	defer fake.getIssueMutex.Unlock()
	fake.GetIssueStub = nil
	fake.getIssueReturns = struct {
		result1 *github.Issue
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricsClient) GetIssueReturnsOnCall(i int, result1 *github.Issue, result2 error) {
	fake.getIssueMutex.Lock()
	defer fake.getIssueMutex.Unlock()
	fake.GetIssueStub = nil
	if fake.getIssueReturnsOnCall == nil {
		fake.getIssueReturnsOnCall = make(map[int]struct {
			result1 *github.Issue
			result2 error
		})
	}
	fake.getIssueReturnsOnCall[i] = struct {
		result1 *github.Issue
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricsClient) GetIssueEvents(arg1 context.Context, arg2 string, arg3 string, arg4 int) ([]*github.IssueEvent, error) {
	fake.getIssueEventsMutex.Lock()
	ret, specificReturn := fake.getIssueEventsReturnsOnCall[len(fake.getIssueEventsArgsForCall)]
	fake.getIssueEventsArgsForCall = append(fake.getIssueEventsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("GetIssueEvents", []interface{}{arg1, arg2, arg3, arg4})
	fake.getIssueEventsMutex.Unlock()
	if fake.GetIssueEventsStub != nil {
		return fake.GetIssueEventsStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getIssueEventsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMetricsClient) GetIssueEventsCallCount() int {
	fake.getIssueEventsMutex.RLock()
	defer fake.getIssueEventsMutex.RUnlock()
	return len(fake.getIssueEventsArgsForCall)
}

func (fake *FakeMetricsClient) GetIssueEventsCalls(stub func(context.Context, string, string, int) ([]*github.IssueEvent, error)) {
	fake.getIssueEventsMutex.Lock()
	defer fake.getIssueEventsMutex.Unlock()
	fake.GetIssueEventsStub = stub
}

func (fake *FakeMetricsClient) GetIssueEventsArgsForCall(i int) (context.Context, string, string, int) {
	fake.getIssueEventsMutex.RLock()
	defer fake.getIssueEventsMutex.RUnlock()
	argsForCall := fake.getIssueEventsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeMetricsClient) GetIssueEventsReturns(result1 []*github.IssueEvent, result2 error) {
	fake.getIssueEventsMutex.Lock()
	defer fake.getIssueEventsMutex.Unlock()
	fake.GetIssueEventsStub = nil
	fake.getIssueEventsReturns = struct {
		result1 []*github.IssueEvent
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricsClient) GetIssueEventsReturnsOnCall(i int, result1 []*github.IssueEvent, result2 error) {
	fake.getIssueEventsMutex.Lock()
	defer fake.getIssueEventsMutex.Unlock()
	fake.GetIssueEventsStub = nil
	if fake.getIssueEventsReturnsOnCall == nil {
		fake.getIssueEventsReturnsOnCall = make(map[int]struct {
			result1 []*github.IssueEvent
			result2 error
		})
	}
	fake.getIssueEventsReturnsOnCall[i] = struct {
		result1 []*github.IssueEvent
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricsClient) GetIssuesFromColumn(arg1 context.Context, arg2 string, arg3 int64, arg4 time.Time, arg5 time.Time) map[string][]*github.Issue {
	fake.getIssuesFromColumnMutex.Lock()
	ret, specificReturn := fake.getIssuesFromColumnReturnsOnCall[len(fake.getIssuesFromColumnArgsForCall)]
	fake.getIssuesFromColumnArgsForCall = append(fake.getIssuesFromColumnArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 time.Time
		arg5 time.Time
	}{arg1, arg2, arg3, arg4, arg5})
	fake.recordInvocation("GetIssuesFromColumn", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.getIssuesFromColumnMutex.Unlock()
	if fake.GetIssuesFromColumnStub != nil {
		return fake.GetIssuesFromColumnStub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getIssuesFromColumnReturns
	return fakeReturns.result1
}

func (fake *FakeMetricsClient) GetIssuesFromColumnCallCount() int {
	fake.getIssuesFromColumnMutex.RLock()
	defer fake.getIssuesFromColumnMutex.RUnlock()
	return len(fake.getIssuesFromColumnArgsForCall)
}

func (fake *FakeMetricsClient) GetIssuesFromColumnCalls(stub func(context.Context, string, int64, time.Time, time.Time) map[string][]*github.Issue) {
	fake.getIssuesFromColumnMutex.Lock()
	defer fake.getIssuesFromColumnMutex.Unlock()
	fake.GetIssuesFromColumnStub = stub
}

func (fake *FakeMetricsClient) GetIssuesFromColumnArgsForCall(i int) (context.Context, string, int64, time.Time, time.Time) {
	fake.getIssuesFromColumnMutex.RLock()
	defer fake.getIssuesFromColumnMutex.RUnlock()
	argsForCall := fake.getIssuesFromColumnArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeMetricsClient) GetIssuesFromColumnReturns(result1 map[string][]*github.Issue) {
	fake.getIssuesFromColumnMutex.Lock()
	defer fake.getIssuesFromColumnMutex.Unlock()
	fake.GetIssuesFromColumnStub = nil
	fake.getIssuesFromColumnReturns = struct {
		result1 map[string][]*github.Issue
	}{result1}
}

func (fake *FakeMetricsClient) GetIssuesFromColumnReturnsOnCall(i int, result1 map[string][]*github.Issue) {
	fake.getIssuesFromColumnMutex.Lock()
	defer fake.getIssuesFromColumnMutex.Unlock()
	fake.GetIssuesFromColumnStub = nil
	if fake.getIssuesFromColumnReturnsOnCall == nil {
		fake.getIssuesFromColumnReturnsOnCall = make(map[int]struct {
			result1 map[string][]*github.Issue
		})
	}
	fake.getIssuesFromColumnReturnsOnCall[i] = struct {
		result1 map[string][]*github.Issue
	}{result1}
}

func (fake *FakeMetricsClient) GetProject(arg1 context.Context, arg2 int64) (*github.Project, error) {
	fake.getProjectMutex.Lock()
	ret, specificReturn := fake.getProjectReturnsOnCall[len(fake.getProjectArgsForCall)]
	fake.getProjectArgsForCall = append(fake.getProjectArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	fake.recordInvocation("GetProject", []interface{}{arg1, arg2})
	fake.getProjectMutex.Unlock()
	if fake.GetProjectStub != nil {
		return fake.GetProjectStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getProjectReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMetricsClient) GetProjectCallCount() int {
	fake.getProjectMutex.RLock()
	defer fake.getProjectMutex.RUnlock()
	return len(fake.getProjectArgsForCall)
}

func (fake *FakeMetricsClient) GetProjectCalls(stub func(context.Context, int64) (*github.Project, error)) {
	fake.getProjectMutex.Lock()
	defer fake.getProjectMutex.Unlock()
	fake.GetProjectStub = stub
}

func (fake *FakeMetricsClient) GetProjectArgsForCall(i int) (context.Context, int64) {
	fake.getProjectMutex.RLock()
	defer fake.getProjectMutex.RUnlock()
	argsForCall := fake.getProjectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMetricsClient) GetProjectReturns(result1 *github.Project, result2 error) {
	fake.getProjectMutex.Lock()
	defer fake.getProjectMutex.Unlock()
	fake.GetProjectStub = nil
	fake.getProjectReturns = struct {
		result1 *github.Project
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricsClient) GetProjectReturnsOnCall(i int, result1 *github.Project, result2 error) {
	fake.getProjectMutex.Lock()
	defer fake.getProjectMutex.Unlock()
	fake.GetProjectStub = nil
	if fake.getProjectReturnsOnCall == nil {
		fake.getProjectReturnsOnCall = make(map[int]struct {
			result1 *github.Project
			result2 error
		})
	}
	fake.getProjectReturnsOnCall[i] = struct {
		result1 *github.Project
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricsClient) GetProjectColumns(arg1 context.Context, arg2 int64) []*github.ProjectColumn {
	fake.getProjectColumnsMutex.Lock()
	ret, specificReturn := fake.getProjectColumnsReturnsOnCall[len(fake.getProjectColumnsArgsForCall)]
	fake.getProjectColumnsArgsForCall = append(fake.getProjectColumnsArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	fake.recordInvocation("GetProjectColumns", []interface{}{arg1, arg2})
	fake.getProjectColumnsMutex.Unlock()
	if fake.GetProjectColumnsStub != nil {
		return fake.GetProjectColumnsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getProjectColumnsReturns
	return fakeReturns.result1
}

func (fake *FakeMetricsClient) GetProjectColumnsCallCount() int {
	fake.getProjectColumnsMutex.RLock()
	defer fake.getProjectColumnsMutex.RUnlock()
	return len(fake.getProjectColumnsArgsForCall)
}

func (fake *FakeMetricsClient) GetProjectColumnsCalls(stub func(context.Context, int64) []*github.ProjectColumn) {
	fake.getProjectColumnsMutex.Lock()
	defer fake.getProjectColumnsMutex.Unlock()
	fake.GetProjectColumnsStub = stub
}

func (fake *FakeMetricsClient) GetProjectColumnsArgsForCall(i int) (context.Context, int64) {
	fake.getProjectColumnsMutex.RLock()
	defer fake.getProjectColumnsMutex.RUnlock()
	argsForCall := fake.getProjectColumnsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMetricsClient) GetProjectColumnsReturns(result1 []*github.ProjectColumn) {
	fake.getProjectColumnsMutex.Lock()
	defer fake.getProjectColumnsMutex.Unlock()
	fake.GetProjectColumnsStub = nil
	fake.getProjectColumnsReturns = struct {
		result1 []*github.ProjectColumn
	}{result1}
}

func (fake *FakeMetricsClient) GetProjectColumnsReturnsOnCall(i int, result1 []*github.ProjectColumn) {
	fake.getProjectColumnsMutex.Lock()
	defer fake.getProjectColumnsMutex.Unlock()
	fake.GetProjectColumnsStub = nil
	if fake.getProjectColumnsReturnsOnCall == nil {
		fake.getProjectColumnsReturnsOnCall = make(map[int]struct {
			result1 []*github.ProjectColumn
		})
	}
	fake.getProjectColumnsReturnsOnCall[i] = struct {
		result1 []*github.ProjectColumn
	}{result1}
}

func (fake *FakeMetricsClient) GetPullRequests(arg1 context.Context, arg2 string, arg3 string) ([]*github.PullRequest, error) {
	fake.getPullRequestsMutex.Lock()
	ret, specificReturn := fake.getPullRequestsReturnsOnCall[len(fake.getPullRequestsArgsForCall)]
	fake.getPullRequestsArgsForCall = append(fake.getPullRequestsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetPullRequests", []interface{}{arg1, arg2, arg3})
	fake.getPullRequestsMutex.Unlock()
	if fake.GetPullRequestsStub != nil {
		return fake.GetPullRequestsStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPullRequestsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMetricsClient) GetPullRequestsCallCount() int {
	fake.getPullRequestsMutex.RLock()
	defer fake.getPullRequestsMutex.RUnlock()
	return len(fake.getPullRequestsArgsForCall)
}

func (fake *FakeMetricsClient) GetPullRequestsCalls(stub func(context.Context, string, string) ([]*github.PullRequest, error)) {
	fake.getPullRequestsMutex.Lock()
	defer fake.getPullRequestsMutex.Unlock()
	fake.GetPullRequestsStub = stub
}

func (fake *FakeMetricsClient) GetPullRequestsArgsForCall(i int) (context.Context, string, string) {
	fake.getPullRequestsMutex.RLock()
	defer fake.getPullRequestsMutex.RUnlock()
	argsForCall := fake.getPullRequestsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeMetricsClient) GetPullRequestsReturns(result1 []*github.PullRequest, result2 error) {
	fake.getPullRequestsMutex.Lock()
	defer fake.getPullRequestsMutex.Unlock()
	fake.GetPullRequestsStub = nil
	fake.getPullRequestsReturns = struct {
		result1 []*github.PullRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricsClient) GetPullRequestsReturnsOnCall(i int, result1 []*github.PullRequest, result2 error) {
	fake.getPullRequestsMutex.Lock()
	defer fake.getPullRequestsMutex.Unlock()
	fake.GetPullRequestsStub = nil
	if fake.getPullRequestsReturnsOnCall == nil {
		fake.getPullRequestsReturnsOnCall = make(map[int]struct {
			result1 []*github.PullRequest
			result2 error
		})
	}
	fake.getPullRequestsReturnsOnCall[i] = struct {
		result1 []*github.PullRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricsClient) GetReposFromIssuesOnColumn(arg1 context.Context, arg2 int64) []string {
	fake.getReposFromIssuesOnColumnMutex.Lock()
	ret, specificReturn := fake.getReposFromIssuesOnColumnReturnsOnCall[len(fake.getReposFromIssuesOnColumnArgsForCall)]
	fake.getReposFromIssuesOnColumnArgsForCall = append(fake.getReposFromIssuesOnColumnArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	fake.recordInvocation("GetReposFromIssuesOnColumn", []interface{}{arg1, arg2})
	fake.getReposFromIssuesOnColumnMutex.Unlock()
	if fake.GetReposFromIssuesOnColumnStub != nil {
		return fake.GetReposFromIssuesOnColumnStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getReposFromIssuesOnColumnReturns
	return fakeReturns.result1
}

func (fake *FakeMetricsClient) GetReposFromIssuesOnColumnCallCount() int {
	fake.getReposFromIssuesOnColumnMutex.RLock()
	defer fake.getReposFromIssuesOnColumnMutex.RUnlock()
	return len(fake.getReposFromIssuesOnColumnArgsForCall)
}

func (fake *FakeMetricsClient) GetReposFromIssuesOnColumnCalls(stub func(context.Context, int64) []string) {
	fake.getReposFromIssuesOnColumnMutex.Lock()
	defer fake.getReposFromIssuesOnColumnMutex.Unlock()
	fake.GetReposFromIssuesOnColumnStub = stub
}

func (fake *FakeMetricsClient) GetReposFromIssuesOnColumnArgsForCall(i int) (context.Context, int64) {
	fake.getReposFromIssuesOnColumnMutex.RLock()
	defer fake.getReposFromIssuesOnColumnMutex.RUnlock()
	argsForCall := fake.getReposFromIssuesOnColumnArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMetricsClient) GetReposFromIssuesOnColumnReturns(result1 []string) {
	fake.getReposFromIssuesOnColumnMutex.Lock()
	defer fake.getReposFromIssuesOnColumnMutex.Unlock()
	fake.GetReposFromIssuesOnColumnStub = nil
	fake.getReposFromIssuesOnColumnReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeMetricsClient) GetReposFromIssuesOnColumnReturnsOnCall(i int, result1 []string) {
	fake.getReposFromIssuesOnColumnMutex.Lock()
	defer fake.getReposFromIssuesOnColumnMutex.Unlock()
	fake.GetReposFromIssuesOnColumnStub = nil
	if fake.getReposFromIssuesOnColumnReturnsOnCall == nil {
		fake.getReposFromIssuesOnColumnReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.getReposFromIssuesOnColumnReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeMetricsClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getIssueMutex.RLock()
	defer fake.getIssueMutex.RUnlock()
	fake.getIssueEventsMutex.RLock()
	defer fake.getIssueEventsMutex.RUnlock()
	fake.getIssuesFromColumnMutex.RLock()
	defer fake.getIssuesFromColumnMutex.RUnlock()
	fake.getProjectMutex.RLock()
	defer fake.getProjectMutex.RUnlock()
	fake.getProjectColumnsMutex.RLock()
	defer fake.getProjectColumnsMutex.RUnlock()
	fake.getPullRequestsMutex.RLock()
	defer fake.getPullRequestsMutex.RUnlock()
	fake.getReposFromIssuesOnColumnMutex.RLock()
	defer fake.getReposFromIssuesOnColumnMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMetricsClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ config.MetricsClient = new(FakeMetricsClient)
